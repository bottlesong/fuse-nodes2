# 多系统实体融合，原始数据必须采用复合标签的形式进行存储，即：
#       (n:system_label:entities)
[system_label]
# 需要进行融合的原始数据所属业务系统的标签
# 必须至少指定两个，才能进行融合
cms = yx
pms = pms
gis = gis

[cms]
# 营销系统中需要对哪些标签下的实体进行融合
# 如果对多类实体融合，为了加快融合速度，实体标签必须按照其拓扑连接规则进行排序
# 多类实体标签之间用英文逗号分割，注意没有空格
entities = Substation,TenKVLine,DisTran&OnColTran
# 如果对多个实体进行融合，那么需要指定不同实体之间的关系的标签，两类实体之间的关系为一组，用英文()包括，每组间用英文逗号分割，注意没有空格
# 如果关系的方向确定，可以指定方向
# 如果两个实体之间并非直接相连，那么需要将中间的实体一并指定，每一组关系实例如下：
#       (-[:relation1]->(:entity)<-[:relation2]-)
# 如果实体种类只有一个，那么下面的参数可以省略
relationships = (-[:Associate]-),(-[:Include]-)
# 每一类需要进行融合的实体，都必须至少有一个属性用于计算，因此，需要对应于entities中的实体标签，指定相应的、用于相似度计算的属性名称
# 目前支持的属性类型分为两类：
#   -文本类，即python中的字符串
#   -枚举类，例如电压等级，但取值必须是在同一套编码规则下
# ⚠️
#   - 所有需要进行计算的属性，在各个系统中必须是成对的，且它们在相应列表中的排列方式必须是一致的
#   - 同一实体的属性用英文{}包括，实体间的属性用英文&分割（即python的字典)
#   - 注意字典中必须有键"TEXT"与"ENUM"，其值均为列表，列表里对应存放属性名称，注意都需要加双引号
properties = {"TEXT":["name"],"ENUM":[]}&{"TEXT":["name"],"ENUM":[]}&{"TEXT":["name"],"ENUM":[]}

[pms]
# 三个系统中需要融合的实体标签数量必须相同，且位置必须对应，否则将无法融合或导致错误的融合结果
entities = Substation,TenKVLine,DisTran&OnColTran
relationships = (-[:Associate]-),(-[:Include]-)
properties = {"TEXT":["name"],"ENUM":[]}&{"TEXT":["name"],"ENUM":[]}&{"TEXT":["name"],"ENUM":[]}

[gis]
entities = Substation,TenKVLine,DisTran&OnColTran
relationships = (-[:Associate]-),(-[:Include]-)
properties = {"TEXT":["name"],"ENUM":[]}&{"TEXT":["name"],"ENUM":[]}&{"TEXT":["name"],"ENUM":[]}

[weight]
# 指定在计算相似度时，每个属性所占的权重
# 注意：
#   - 每一个实体的所有属性的权重之和为1（定义在一个{}中）
#   - 如果不指定权重或权重格式错误，那么将按平均值进行计算
weight = {"TEXT":[1],"ENUM":[]}&{"TEXT":[1],"ENUM":[]}&{"TEXT":[1],"ENUM":[]}

[fuse]
# 指定融合后新生成的节点的标签
entities = Substation,TenKVLine,DisTran
# 指定融合后的新生成的节点之间的关系
relationships = Associate,Include
# 指定将融合前的节点的哪些属性迁移到融合后的节点上。
# 注意属性名称与节点标签必须是对应的，用英文&连接；同一类节点的属性用英文逗号连接
# 如：
#   - name,volt&name,site,addr
# ⚠️不能有空格！
properties = name,mRID,cityCode,countyCode,gdsCode,nodeType&name,mRID,cityCode,countyCode,gdsCode,nodeType&name,mRID,cityCode,countyCode,gdsCode,nodeType